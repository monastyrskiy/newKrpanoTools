<krpano version="1.0.8.15">

	<action name="skin_nextscene">
		add(newsceneindex, scene[get(xml.scene)].index, %1);
	
		set(new_scene_index, 0);
		<!-- Необходимо получить номер следующей сцены с учетом отключенных thumb 
		в get_newsceneindex устанавливается значение глобальной переменной new_scene_index
		-->
		get_newsceneindex(newsceneindex, %1);

		if(new_scene_index GE 0,
			if(new_scene_index LT scene.count,
				txtadd(layer[skin_thumbborder].parent, 'thumb_', get(new_scene_index));
				layer[scrollarea].scrolltocenter(get(scene[get(new_scene_index)].thumbx), get(scene[get(new_scene_index)].thumby));
				loadscene(get(new_scene_index), null, MERGE|KEEPPLUGIN, BLEND(0.5));
			  );
		  );		  
	</action>

	<action name="get_newsceneindex">
		if(%2 GT 0,
			<!-- двигаемся вниз по картинкам сцен в слайдере и ищем включенную-->
			for(set(i, get(%1)), i LT scene.count, inc(i),
				if(get(scene[get(i)].show_in_slider), copy(new_scene_index, i); set(i, scene.count))),
			<!-- двигаемся вверх по картинкам сцен в слайдере и ищем включенную-->
			for(set(i, get(%1)), i GT 0, add(i, -1),
				if(get(scene[get(i)].show_in_slider), copy(new_scene_index, i); set(i, 0)))
		);
	</action>

	<action name="set_thumbborder">
		set(new_sceneindex, get(scene[get(xml.scene)].index));
		if(get(scene[get(new_sceneindex)].show_in_slider),
			txtadd(layer[skin_thumbborder].parent, 'thumb_', get(new_sceneindex));
			layer[scrollarea].scrolltocenter(get(scene[get(new_sceneindex)].thumbx), get(scene[get(new_sceneindex)].thumby));
		);
	</action>

	<action name="skin_nextscene_loop">
		add(newsceneindex, scene[get(xml.scene)].index, %1);
		sub(lastsceneindex, scene.count, 1);
		if(newsceneindex LT 0, copy(newsceneindex,lastsceneindex));
		if(newsceneindex GT lastsceneindex, set(newsceneindex,0));
		layer[skin_thumbs].scrolltocenter(get(scene[get(newsceneindex)].thumbx), get(scene[get(newsceneindex)].thumby));
		loadscene(get(newsceneindex), null, MERGE, BLEND(0.5));
	</action>

	<action name="thumbs_onclick">
		if(layer[thumbs].state == 'closed', 
			tween(layer[thumbs].x, 0, 0.5); set(layer[arrow].rotate, 180); tween(layer[arrow].x, -15), 
			tween(layer[thumbs].x, -157, 0.5); set(layer[arrow].rotate, 0); set(layer[arrow].x, -10);
		); 
		switch(layer[thumbs].state, 'closed', 'opened');
	</action>

	<action name="thumb_onclick">
		lie(get(scene[get(linkedscene)].thumb_name));
		wait(0.3);
		set(layer[skin_thumbborder].parent, get(scene[get(linkedscene)].thumb_name));
		loadscene(get(linkedscene), null, MERGE|KEEPPLUGIN, BLEND(0.5));
	</action>

	<action name="skin_updatescroll">
		if(layer[scrollarea].loaded,
			set(cursceneindex, 0);
			if(xml.scene, copy(cursceneindex, scene[get(xml.scene)].index));
			layer[scrollarea].setcenter(get(scene[get(cursceneindex)].thumbx), get(scene[get(cursceneindex)].thumby));
		  );
	</action>

	<action name="addthumbs">
		copy(thumbwidth, skin_settings.thumbswidth);
		copy(thumbheight, skin_settings.thumbsheight);
		copy(thumbpadding, skin_settings.thumbspadding);
		copy(thumbcrop, skin_settings.thumbscrop);

		mul(thumbarheight, scene.count, 90);
		add(thumbarheight, thumbpadding);
		
		copy(layer[scrollarea].height, thumbarheight);

		set(j, 0);

		for(set(i, 0), i LT scene.count, inc(i),
			if(scene[get(i)].show_in_slider,
				txtadd(thumbname,'thumb_', get(i));
				addlayer(get(thumbname));
				copy(layer[get(thumbname)].url, scene[get(i)].thumburl);
				set(layer[get(thumbname)].keep, true);
				set(layer[get(thumbname)].parent, 'scrollarea');
				set(layer[get(thumbname)].align, lefttop);
				mul(thumby, j, 90);
				add(j, 1);
				add(thumby, thumbpadding);
				copy(layer[get(thumbname)].y, thumby);
				set(layer[get(thumbname)].x, 17);

				add(scene[get(i)].thumbx, 7, thumbpadding);
				copy(scene[get(i)].thumby, thumby);

				copy(layer[get(thumbname)].width, thumbwidth);
				copy(layer[get(thumbname)].height, thumbheight);

				set(layer[get(thumbname)].linkedscene, get(scene[get(i)].name) );
				set(layer[get(thumbname)].onclick, thumb_onclick());

				set(scene[get(i)].thumb_name, get(thumbname));
				
				set(layer[get(thumbname)].onover, magnify(get(scene[get(linkedscene)].thumb_name)));
				set(layer[get(thumbname)].onout,  lie(get(scene[get(linkedscene)].thumb_name)));
				
				set(layer[get(thumbname)].onhover, showtext(get(scene[get(linkedscene)].title), buttonstyle));
			);
		);
		set(layer[skin_thumbborder].parent, 'thumb_0');
	</action>

    <!-- action performed when mouse hovers over a thumbnail preview -->
    <action name="magnify">
		ifnot(layer[skin_thumbborder].parent == %1,
			tween(layer[%1].alpha,  1.0, 0.3, easeInQuad);
			tween(layer[%1].scale, 1.05, 0.3, easeInQuad);
		);
	</action>
    <!-- action performed when mouse goes away from a thumbnail preview -->
    <action name="lie">
		tween(layer[%1].alpha, 0.8, 0.3, easeInQuad);
		tween(layer[%1].scale, 1.0, 0.3, easeInQuad);		
	</action>
</krpano>